/**
 * Class PinterestHelper ch·ª©a c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ l√†m vi·ªác v·ªõi Pinterest
 * - L·∫•y th√¥ng tin chi ti·∫øt c·ªßa pin t·ª´ API Pinterest
 * - T·∫°o v√† hi·ªÉn th·ªã overlay th√¥ng tin tr√™n m·ªói pin
 * - X·ª≠ l√Ω cache v√† theo d√µi c√°c pin m·ªõi
 */
class PinterestHelper {
    /**
     * L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt pin t·ª´ API Pinterest
     * @param {string} pinId - ID c·ªßa pin c·∫ßn l·∫•y th√¥ng tin
     * @returns {Promise<Object|null>} Th√¥ng tin chi ti·∫øt c·ªßa pin ho·∫∑c null n·∫øu c√≥ l·ªói
     */
    static async fetchPinDetail(pinId) {
        const url = Helper.makePinResourceUrl(pinId);

        const headers = {
            accept: "*/*",
            "accept-language": "en,en-US;q=0.9",
            referer: "https://www.pinterest.com/",
            "x-pinterest-appstate": "active",
            "x-pinterest-pws-handler": "www/pin/[id].js",
            "x-pinterest-source-url": `/pin/${pinId}/`,
        };

        try {
            const res = await fetch(url, {
                method: "GET",
                credentials: "include",
                headers: headers,
            });

            if (!res.ok) {
                const txt = await res.text().catch(() => "");
                throw new Error(`HTTP ${res.status} - ${txt}`);
            }

            const json = await res.json();
            const parsed = Helper.parsePinResourceResponse(json);

            return parsed;
        } catch (err) {
            console.error("fetchPinDetail error", err);
            return null;
        }
    }


    /**
     * T·∫°o key ƒë·ªÉ l∆∞u cache trong sessionStorage
     * @param {string} pinId - ID c·ªßa pin
     * @returns {string} Key ƒë·ªÉ l∆∞u trong sessionStorage
     */
    static cacheKey(pinId) {
        return `pin_detail_${pinId}`;
    }

    /**
     * T·∫°o v√† g·∫Øn overlay hi·ªÉn th·ªã th√¥ng tin l√™n pin
     * Overlay n√†y hi·ªÉn th·ªã c√°c th√¥ng s·ªë c∆° b·∫£n nh∆∞:
     * - S·ªë l∆∞·ª£t reaction
     * - S·ªë l∆∞·ª£t comment
     * - S·ªë l∆∞·ª£t save
     * - S·ªë l∆∞·ª£t repin
     * - S·ªë l∆∞·ª£t share
     * 
     * @param {HTMLElement} pinEl - Element c·ªßa pin c·∫ßn th√™m overlay
     * @param {Object} info - Th√¥ng tin chi ti·∫øt c·ªßa pin t·ª´ API
     */
    static attachOverlayToPin(pinEl, info) {
        if (!pinEl || pinEl.querySelector(".ext-pin-info-box")) return;

        // C·∫•u h√¨nh giao di·ªán tr∆∞·ªõc khi th√™m th√¥ng tin
        const box = document.createElement("div");
        box.className = "ext-pin-info-box";
        box.style.position = "absolute";
        box.style.top = "8px";
        box.style.left = "8px";
        box.style.background = "rgba(30,30,30,0.45)";
        box.style.color = "#fff";
        box.style.backdropFilter = "blur(6px)";

        box.style.border = "1px solid rgba(255,255,255,0.2)";
        box.style.boxShadow = "0 4px 12px rgba(0,0,0,0.3)";
        box.style.padding = "6px 8px";
        box.style.fontSize = "12px";

        box.style.zIndex = "99999";
        box.style.boxShadow = "0 4px 12px rgba(0,0,0,0.08)";
        box.style.display = "flex";
        box.style.flexDirection = "column";
        box.style.gap = "4px";
        box.style.minWidth = "85px";

        // ƒê·ªçc th√¥ng tin t·ª´ d·ªØ li·ªáu ƒë√£ l·∫•y
        let reaction = Helper.formatNumberLocale(info.reaction_counts["1"] ?? 0);
        let comment = Helper.formatNumberLocale(info.aggregated_pin_data.comment_count ?? 0);
        let save = Helper.formatNumberLocale(info.aggregated_pin_data.aggregated_stats.saves ?? 0);
        let repin = Helper.formatNumberLocale(info.repin_count ?? 0);
        let share = Helper.formatNumberLocale(info.share_count ?? 0);
        let linkImage = info.images?.orig?.url ?? "";
        // Gi·ªù l√† g√°n d·ªØ li·ªáu v√†o overlay
        const likes = document.createElement("div");
        likes.textContent = `‚ù§Ô∏è Reaction: ${reaction}`;
        const comments = document.createElement("div");
        comments.textContent = `üí¨ Cmt: ${comment}`;
        const saves = document.createElement("div");
        saves.textContent = `üìå Save: ${save}`;
        const repins = document.createElement("div");
        repins.textContent = `üîÅ Repin: ${repin}`
        const shares = document.createElement("div");
        shares.textContent = `üì§ Share: ${share}`;

        box.appendChild(likes);
        box.appendChild(comments);
        box.appendChild(saves);
        box.appendChild(repins);
        box.appendChild(shares);

        //-- N√∫t m·ªü info chi ti·∫øt
        const btn = document.createElement("button");
        btn.textContent = "‚ÑπÔ∏è Info";
        btn.style.display = "contents";
        btn.style.cursor = "pointer";
        btn.style.border = "none";
        btn.style.color = "#fff";
        btn.style.background = "transparent";
        btn.addEventListener("click", (e) => {
            e.stopPropagation();
            this.showDetailTooltip(pinEl, info);
        });
        box.appendChild(btn);

        const link = document.createElement("a");
        link.href = linkImage ?? "#";
        link.target = "_blank";
        link.textContent = "üîó Open Pin";
        link.style.color = "#fff";
        link.style.textDecoration = "none";
        box.appendChild(link);

        // G·∫Øn overlay v√†o pin
        pinEl.style.position = pinEl.style.position || "relative";
        pinEl.appendChild(box);
    }

    
    // Hi·ªÉn th·ªã tooltip chi ti·∫øt khi nh·∫•n n√∫t
    /**
     * Hi·ªÉn th·ªã tooltip v·ªõi th√¥ng tin chi ti·∫øt c·ªßa pin
     * Tooltip n√†y s·∫Ω hi·ªÉn th·ªã:
     * - Ti√™u ƒë·ªÅ pin
     * - M√¥ t·∫£
     * - Th√¥ng tin t√°c gi·∫£ v√† s·ªë l∆∞·ª£ng follower
     * - C√°c ch·ªâ s·ªë t∆∞∆°ng t√°c ƒë·∫ßy ƒë·ªß
     * - Link ƒë·ªÉ m·ªü pin
     * Tooltip s·∫Ω t·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
     * 
     * @param {HTMLElement} pinEl - Element c·ªßa pin c·∫ßn hi·ªÉn th·ªã tooltip
     * @param {Object} info - Th√¥ng tin chi ti·∫øt c·ªßa pin
     */
    static showDetailTooltip(pinEl, info) {
        // L·∫•y th√¥ng tin chi ti·∫øt
        let reaction = Helper.formatNumberLocale(info.reaction_counts["1"] ?? 0);
        let comment = Helper.formatNumberLocale(info.aggregated_pin_data.comment_count ?? 0);
        let save = Helper.formatNumberLocale(info.aggregated_pin_data.aggregated_stats.saves ?? 0);
        let repin = Helper.formatNumberLocale(info.repin_count ?? 0);
        let share = Helper.formatNumberLocale(info.share_count ?? 0);


        document.querySelectorAll(".ext-pin-tooltip").forEach((t) => t.remove());

        const t = document.createElement("div");
        t.className = "ext-pin-tooltip";
        t.style.position = "absolute";
        t.style.bottom = "40px";
        t.style.left = "5px";
        t.style.width = "220px";
        t.style.background = "rgba(30,30,30,0.45)";
        t.style.color = "#fff";
        t.style.backdropFilter = "blur(6px)";
        t.style.border = "1px solid rgba(255,255,255,0.2)";
        t.style.boxShadow = "0 4px 12px rgba(0,0,0,0.3)";
        t.style.borderRadius = "5px";
        t.style.padding = "5px";
        t.style.zIndex = "1000000";
        t.style.overflow = "visible";
        t.innerHTML = `
    <div style="font-weight:600;margin-bottom:6px;">${info.title ?? "(No title)"}</div>
    <div style="font-size:12px;color:#fff;margin-bottom:6px;">${info.description ?? ""}</div>
    <div style="font-size:12px;color:#fff;margin-bottom:6px;">
      <strong>Author:</strong> <a href="https://www.pinterest.com/${info.pinner?.username ?? '#'}/" 
      target="_blank" style="color:#fff;font-weight:600;text-decoration:none;"> ${info.pinner?.username ?? "N/A"} </a> (Followers: ${Helper.formatNumberLocale(info.pinner?.follower_count ?? 0)})
    </div>
    <div style="display:flex;gap:8px;font-size:13px;">
      <div>‚ù§Ô∏è ${reaction}</div> 
      <div>üí¨ ${comment}</div>
      <div>üìå ${save}</div>
      <div>üîÅ ${repin}</div>
      <div>üì§ ${share}</div>
    </div>
    <div style="margin-top:8px;text-align:left;">
      
      <a href="${info.link ?? "#"}" target="_blank" style="color:#e60023;font-weight:600;text-decoration:none;">üîó Open Link</a>
    </div>
  `;
        pinEl.appendChild(t);

        setTimeout(() => {
            try { t.remove(); } catch (e) { }
        }, 5000);
    }


    /**
     * X·ª≠ l√Ω t·∫•t c·∫£ c√°c pin c√≥ tr√™n trang hi·ªán t·∫°i
     * Quy tr√¨nh x·ª≠ l√Ω cho m·ªói pin:
     * 1. L·∫•y ID c·ªßa pin
     * 2. Ki·ªÉm tra xem ƒë√£ c√≥ overlay ch∆∞a
     * 3. T√¨m th√¥ng tin trong cache
     * 4. N·∫øu kh√¥ng c√≥ trong cache, g·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin
     * 5. L∆∞u th√¥ng tin v√†o cache
     * 6. T·∫°o v√† hi·ªÉn th·ªã overlay
     */
    static async processPinsOnce() {
        const pins = document.querySelectorAll("div[data-test-id='pin']");
        for (const pin of pins) {
            try {
                const id = Helper.extractPinIdFromElement(pin);
                if (!id) continue;
                if (pin.querySelector(".ext-pin-info-box")) continue;

                const key = this.cacheKey(id);
                let info = null;
                try {
                    const raw = sessionStorage.getItem(key);
                    if (raw) info = JSON.parse(raw);
                } catch (e) { info = null; }

                if (!info) {
                    const fetched = await this.fetchPinDetail(id);
                    if (!fetched) continue;
                    info = fetched;
                    try { sessionStorage.setItem(key, JSON.stringify(info)); } catch { }
                }

                this.attachOverlayToPin(pin, info);
            } catch (err) {
                console.error("processPinsOnce error", err);
            }
        }
    }

    /**
     * Theo d√µi v√† x·ª≠ l√Ω c√°c pin m·ªõi khi ch√∫ng xu·∫•t hi·ªán trong viewport
     * S·ª≠ d·ª•ng IntersectionObserver ƒë·ªÉ:
     * - Ch·ªâ x·ª≠ l√Ω pin khi n√≥ hi·ªÉn th·ªã trong m√†n h√¨nh
     * - T·ªëi ∆∞u hi·ªáu nƒÉng b·∫±ng c√°ch kh√¥ng x·ª≠ l√Ω pin ch∆∞a hi·ªÉn th·ªã
     * - T·ª± ƒë·ªông x·ª≠ l√Ω pin m·ªõi khi ng∆∞·ªùi d√πng cu·ªôn trang
     * 
     * Pin s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω khi hi·ªÉn th·ªã 50% di·ªán t√≠ch trong viewport
     */
    static observeVisiblePins() {
        const pins = document.querySelectorAll("div[data-test-id='pin']");
        const observer = new IntersectionObserver(async (entries) => {
            for (const entry of entries) {
                if (entry.isIntersecting) {
                    const pin = entry.target;
                    const id = Helper.extractPinIdFromElement(pin);
                    if (!id || pin.querySelector(".ext-pin-info-box")) continue;

                    const key = this.cacheKey(id);
                    let info = null;
                    try {
                        const raw = sessionStorage.getItem(key);
                        if (raw) info = JSON.parse(raw);
                    } catch { }

                    if (!info) {
                        const fetched = await this.fetchPinDetail(id);
                        if (!fetched) continue;
                        info = fetched;
                        try { sessionStorage.setItem(key, JSON.stringify(info)); } catch { }
                    }

                    this.attachOverlayToPin(pin, info);
                }
            }
        }, {
            root: null,
            threshold: 0.5, // khi pin hi·ªÉn th·ªã 50% m·ªõi load
        });

        pins.forEach((p) => observer.observe(p));
    }
}